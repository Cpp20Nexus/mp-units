# The MIT License (MIT)
#
# Copyright (c) 2018 Mateusz Pusz
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

name: Conan CI

on:
  push:
    paths-ignore:
      - "docs/**"
  pull_request:
    paths-ignore:
      - "docs/**"

env:
  CHANNEL: ${{ fromJSON('["testing", "stable"]')[github.ref_type == 'tag' && startsWith(github.ref_name, 'v')] }}

jobs:
  build:
    name: "C++${{ matrix.std }} ${{ matrix.config.name }} ${{ matrix.build_type }}"
    runs-on: ${{ matrix.config.os }}
    strategy:
      fail-fast: false
      matrix:
        std: [20, 23]
        config:
          # - {
          #     name: "MSVC 14.2",
          #     os: windows-2019,
          #     compiler: { type: VISUAL, version: 16, cc: "", cxx: "" },
          #     conan-config: "-c user.build:skip_la=True",
          #   }
          # - {
          #     name: "MSVC 14.3",
          #     os: windows-2022,
          #     compiler: { type: MSVC, version: 193, cc: "", cxx: "" },
          #     conan-config: "",
          #   }
          - {
              name: "GCC-11",
              os: ubuntu-22.04,
              compiler:
                {
                  type: GCC,
                  version: 11,
                  cc: "gcc-11",
                  cxx: "g++-11",
                },
              conan-config: "",
            }
          - {
              name: "GCC-12",
              os: ubuntu-24.04,
              compiler:
                {
                  type: GCC,
                  version: 12,
                  cc: "gcc-12",
                  cxx: "g++-12",
                },
              conan-config: "",
            }
          - {
              name: "GCC-13",
              os: ubuntu-24.04,
              compiler:
                {
                  type: GCC,
                  version: 13,
                  cc: "gcc-13",
                  cxx: "g++-13",
                },
              conan-config: "",
            }
          - {
              name: "GCC-14",
              os: ubuntu-24.04,
              compiler:
                {
                  type: GCC,
                  version: 14,
                  cc: "gcc-14",
                  cxx: "g++-14",
                },
              conan-config: "",
            }
          - {
              name: "Clang-16",
              os: ubuntu-22.04,
              compiler:
                {
                  type: CLANG,
                  version: 16,
                  cc: "clang-16",
                  cxx: "clang++-16",
                },
              lib: "libc++",
              conan-config: "",
            }
          - {
              name: "Clang-17",
              os: ubuntu-24.04,
              compiler:
                {
                  type: CLANG,
                  version: 17,
                  cc: "clang-17",
                  cxx: "clang++-17",
                },
              lib: "libc++",
              conan-config: "",
            }
          - {
              name: "Apple Clang 15",
              os: macos-14,
              compiler:
                {
                  type: APPLE_CLANG,
                  version: "15.0",
                  cc: "clang",
                  cxx: "clang++",
                },
              conan-config: "",
            }
        build_type: ["Release", "Debug"]

    env:
      CC: ${{ matrix.config.compiler.cc }}
      CXX: ${{ matrix.config.compiler.cxx }}

    steps:
      - uses: actions/checkout@v4
      - name: Cache Conan data
        uses: actions/cache@v3
        env:
          cache-name: cache-conan-data
        with:
          path: ~/.conan2/p
          key: build-${{ matrix.config.os }}-${{ matrix.config.compiler.type }}-${{ matrix.config.lib }}-${{ matrix.build_type }}-${{ matrix.config.compiler.version }}-${{ matrix.std }}
          restore-keys: |
            build-${{ matrix.config.os }}-${{ matrix.config.compiler.type }}-${{ matrix.config.lib }}-${{ matrix.build_type }}-${{ matrix.config.compiler.version }}-${{ matrix.std }}
            build-${{ matrix.config.os }}-${{ matrix.config.compiler.type }}-${{ matrix.config.lib }}-${{ matrix.build_type }}-${{ matrix.config.compiler.version }}-
            build-${{ matrix.config.os }}-${{ matrix.config.compiler.type }}-${{ matrix.config.lib }}-${{ matrix.build_type }}-
            build-${{ matrix.config.os }}-${{ matrix.config.compiler.type }}-${{ matrix.config.lib }}-
            build-${{ matrix.config.os }}-${{ matrix.config.compiler.type }}-
            build-${{ matrix.config.os }}-
      - uses: hendrikmuhs/ccache-action@v1.2
        if: runner.os == 'Linux'
        with:
          key: ${{ matrix.config.os }}-${{ matrix.config.compiler.type }}-${{ matrix.config.lib }}-${{ matrix.build_type }}-${{ matrix.config.compiler.version }}-${{ matrix.std }}
          max-size: 50M
      - name: Install gcc-13
        if: matrix.config.compiler.type == 'GCC' && matrix.config.compiler.version == '13'
        shell: bash
        run: |
          sudo apt install -y g++-${{ matrix.config.compiler.version }}
      - name: Install Clang
        if: matrix.config.compiler.type == 'CLANG'
        shell: bash
        working-directory: ${{ env.HOME }}
        run: |
          wget https://apt.llvm.org/llvm.sh
          chmod +x llvm.sh
          sudo ./llvm.sh ${{ matrix.config.compiler.version }}
          sudo apt install -y clang-tools-${{ matrix.config.compiler.version }}
      - name: Install Libc++
        if: matrix.config.compiler.type == 'CLANG' && matrix.config.lib == 'libc++'
        shell: bash
        run: |
          sudo apt install -y libc++-${{ matrix.config.compiler.version }}-dev libc++abi-${{ matrix.config.compiler.version }}-dev libunwind-${{ matrix.config.compiler.version }}-dev
      - name: Select Xcode version
        if: matrix.config.compiler.type == 'APPLE_CLANG'
        shell: bash
        run: |
          sudo xcode-select -s /Applications/Xcode_${{ matrix.config.compiler.version }}.app && /usr/bin/xcodebuild -version
      - name: Install Ninja
        shell: bash
        run: |
          if [ $RUNNER_OS == 'Linux' ]; then
            sudo apt install -y ninja-build
          elif [ $RUNNER_OS == 'Windows' ]; then
            choco install ninja
          elif [ $RUNNER_OS == 'macOS' ]; then
            brew update
            brew install ninja
          else
            echo "'$RUNNER_OS' not supported"
            exit 1
          fi
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.x
      - name: Install Conan
        shell: bash
        run: |
          pip install -U conan
      - name: Configure Conan
        shell: bash
        run: |
          conan profile detect --force
          if [[ "${{ matrix.config.compiler.type }}" == "CLANG" ]]; then
            sed -i.backup '/^\[settings\]$/,/^\[/ s/^compiler.libcxx=.*/compiler.libcxx=${{ matrix.config.lib }}/' ~/.conan2/profiles/default
          fi
          sed -i.backup '/^\[settings\]$/,/^\[/ s/^compiler.cppstd=.*/compiler.cppstd=${{ matrix.std }}/' ~/.conan2/profiles/default
          sed -i.backup '/^\[settings\]$/,/^\[/ s/^build_type=.*/build_type=${{ matrix.build_type }}/' ~/.conan2/profiles/default
          conan profile show -pr default
      - name: Create Conan package
        shell: bash
        run: |
          conan create . --user mpusz --channel ${CHANNEL} --lockfile-out=package.lock \
                         -b mp-units/* -b missing -c tools.cmake.cmaketoolchain:generator="Ninja Multi-Config" \
                         -c user.build:all=True ${{ matrix.config.conan-config }}
      - name: Obtain package reference
        id: get-package-ref
        shell: bash
        run: |
          echo "PACKAGE_REF=`egrep -o mp-units[^%]+ package.lock`" >> ${GITHUB_OUTPUT}
      - name: Upload mp-units Conan package to Conan CI repository
        if: github.ref == 'refs/heads/master' || env.CHANNEL == 'stable'
        shell: bash
        run: |
          conan remote add conan-mpusz-ci https://mpusz.jfrog.io/artifactory/api/conan/conan-ci
          conan remote login conan-mpusz-ci ${{ secrets.CONAN_LOGIN_USERNAME }} -p ${{ secrets.CONAN_CI_PASSWORD }}
          conan upload ${{ steps.get-package-ref.outputs.package_ref }} -r conan-mpusz-ci --confirm
      - name: Clean Conan cache before backup
        shell: bash
        run: |
          conan remove mp-units --confirm
          conan remove *#!latest --confirm
          conan remove *:*#!latest --confirm
          conan cache clean "*" -s -b -d
    outputs:
      package_ref: ${{ steps.get-package-ref.outputs.PACKAGE_REF }}

  promote_package:
    if: github.ref == 'refs/heads/master' || (github.ref_type == 'tag' && startsWith(github.ref_name, 'v'))
    needs: build
    name: Promote Conan package
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.x
      - name: Install Conan
        shell: bash
        run: |
          pip install -U conan
      - name: Configure Conan
        shell: bash
        run: |
          conan remote add conan-mpusz-ci https://mpusz.jfrog.io/artifactory/api/conan/conan-ci
          conan remote add conan-mpusz-oss https://mpusz.jfrog.io/artifactory/api/conan/conan-oss
      - name: Promote mp-units Conan package
        shell: bash
        run: |
          conan remote login conan-mpusz-ci ${{ secrets.CONAN_LOGIN_USERNAME }} -p ${{ secrets.CONAN_CI_PASSWORD }}
          conan remote login conan-mpusz-oss ${{ secrets.CONAN_LOGIN_USERNAME }} -p ${{ secrets.CONAN_PASSWORD }}
          conan download ${{ needs.build.outputs.package_ref }} -r conan-mpusz-ci
          conan upload ${{ needs.build.outputs.package_ref }} -r conan-mpusz-oss --confirm
      - name: Do housekeeping on conan-mpusz-oss
        shell: bash
        run: |
          conan remove mp-units/*#!latest --confirm -r conan-mpusz-oss
          conan remove mp-units/*:*#!latest --confirm -r conan-mpusz-oss
